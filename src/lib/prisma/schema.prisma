// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

enum UserPlan {
  FREE
  TRIAL
  PRO
}

enum IdentityProvider {
  STORE_EYE
  GOOGLE
}

model Credential {
  id     Int    @id @default(autoincrement())
  type   String
  key    Json
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?

  @@map(name: "credential")
}

model User {
  id                 Int                   @id @default(autoincrement())
  username           String?               @unique
  name               String?
  email              String                @unique
  emailVerified      DateTime?
  password           String?
  avatar             String?
  createdDate        DateTime              @default(now()) @map(name: "created")
  credentials        Credential[]
  teams              Membership[] // organizations
  applications       Application[]
  consumers          ApplicationConsumer[]
  identityProvider   IdentityProvider      @default(STORE_EYE)
  identityProviderId String?
  plan               UserPlan              @default(TRIAL)
  verified           Boolean?              @default(false)
  projects           Project[]

  @@map(name: "users")
}

model Organization {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  slug      String?      @unique
  logo      String?
  members   Membership[]
  projects  Project[]
  brands    Brand[]
  countries Country[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  jobs   Job[]
  stores Store[]

  @@map(name: "organization")
}

model Country {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  code           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int

  consumers ApplicationConsumer[]
  job       Job[]
  store     Store[]

  @@unique([name, code])
  @@map(name: "country")
}

model Brand {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  fullName       String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int

  consumers ApplicationConsumer[]
  job       Job[]
  store     Store[]

  @@unique([name, organizationId])
  @@map(name: "brand")
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
}

model Membership {
  role           MembershipRole
  accepted       Boolean        @default(false)
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int

  @@id([userId, organizationId])
  @@map(name: "membership")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt


  @@unique([identifier, token])
  @@map(name: "verification_request")
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  expires   DateTime

  @@map(name: "reset_password_request")
}

enum PaymentType {
  STRIPE
}

model Payment {
  id            Int          @id @default(autoincrement())
  uid           String       @unique
  type          PaymentType
  applicationId Int
  application   Application? @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  amount        Int
  fee           Int
  currency      String
  success       Boolean
  refunded      Boolean
  data          Json
  externalId    String       @unique

  @@map(name: "payment")
}

model Project {
  id             Int                   @id @default(autoincrement())
  name           String                @unique
  slug           String?               @unique
  organization   Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  owner          User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        Int
  createdAt      DateTime              @default(now())
  updatedAt      DateTime?
  consumers      ApplicationConsumer[]

  @@map(name: "project")
}

enum ApplicationType {
  STORES     @map("stores")
  JOBS       @map("jobs")
  ECOMMERCE  @map("ecommerce")
  TRAININGS  @map("trainings")
}

model Application {
  id        Int                   @id @default(autoincrement())
  owner     User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   Int
  createdAt DateTime              @default(now())
  consumers ApplicationConsumer[]
  paid      Boolean
  payment   Payment[]
  type      ApplicationType

  @@map(name: "application")
}

enum ApplicationConsumerStatus {
  ACTIVE  @map("active")
  DRAFT   @map("draft")
  CLOSED  @map("closed")
}

model ApplicationConsumer {
  id     Int    @id @default(autoincrement())
  uid    String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  applicationId Int

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int

  title       String
  description String?
  brands      Brand[]
  countries   Country[]
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime?
  status      ApplicationConsumerStatus @default(DRAFT)

  apiKey     String      @unique
  expires    DateTime
  domain     String
  components Component[]

  // TODO: Allow to define colors per application
  @@map(name: "application_consumer")
}

model Component {
  id          Int                 @id @default(autoincrement())
  name        String
  slug        String
  description String?
  consumer    ApplicationConsumer @relation(fields: [consumerId], references: [id], onDelete: Cascade)
  consumerId  Int
  clientId    String?
  secretId    String?
  tokenUrl    String?
  dataUrl     String?

  @@map(name: "component")
}

model Job {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int

  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId Int

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId Int

  store   Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId Int

  professionName  String?
  jobCategoryName String?

  title     String
  bannerUrl String?
  body      String?
  footer    String?

  applyUrl   String?
  isManager  Boolean?
  language   String?
  externalId String

  @@map(name: "job")
}

model Store {
  id             Int          @id @default(autoincrement())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int

  brand   Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId Int

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  countryId Int

  osmId      String?
  storeId    String?
  costCenter String?
  type       String  @default("FASTFOOD")
  status     String  @default("OPEN")

  lat     String
  lng     String
  name    String
  nameOsm String?
  slug    String?

  addressOsm    String?
  addressGoogle String?
  address       String?

  locatedInName String?
  locatedInUrl  String?

  phone String?

  imagePlaceUrl      String?
  imageStreetViewUrl String?
  menuUrl            String?
  mapUrl             String?
  orderUrl           String?
  streetViewUrl      String?
  reviewsUrl         String?

  paymentTypes      String[]
  photos            String[]
  orders            Json?
  features          String[]
  services          Json?
  franchiseeDetails Json?
  openingHours      Json?
  ownership         String?

  jobs Job[]

  @@map(name: "store")
}
